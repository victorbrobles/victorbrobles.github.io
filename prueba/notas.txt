

Con la nueva disposici칩n del suelo, habr치 que cambiar la restricci칩n a la hora de girar una pieza o bajarla,
teniendo en cuenta la nueva width de la pieza que no toque el nuevo suelo


Una idea para eliminar piezas es, en lugar de poner un punto por cada posicion, poner el numero de pieza en cada posicion donde este la pieza.


AFRAME.registerComponent('suelo', {
  schema: {
    position: {default: "0 0 0"},
    width: {default: 0},
    height: {default: 0}
  },

  init: function() {
    var el = this.el;
    var data = this.data;

    el.setAttribute('position', data.position);
    el.setAttribute('color', "black");
    el.setAttribute('width', data.width);
    el.setAttribute('height', data.height);
    el.id = 'suelo';

    //Creamos pieza

    var entorno = document.getElementById("entorno");
    var pieza = document.createElement("a-box");

    pieza.classList.add("cubo");
    pieza.id = "cubo";
    pieza.setAttribute('cubo', damePropsPieza())

    entorno.appendChild(pieza);

  },
  tick: function() {
    var el = this.el;
    var data = this.data;

    var pieza = document.getElementById("cubo");
    var position = pieza.getAttribute('position');
    var alturaPieza = pieza.getAttribute('height');
    var positionSuelo = el.getAttribute('position');

    alturaSuelo = (data.height/2) + positionSuelo.y;

    //Esto se borrar치
    if (position.y <= alturaSuelo + (alturaPieza/2)) {
      piezaTocaSuelo = true;
    } else {
      piezaTocaSuelo = false;
    }
    //

    var pared = document.getElementById('pared_izq');

    var anchuraSuelo = el.getAttribute('width');
    var alturaSuelo = el.getAttribute('height');

    var anchuraPared = pared.getAttribute('width');
    var alturaPared = pared.getAttribute('height');

    var anchuraTablero = anchuraSuelo - 2 * anchuraPared;
    var alturaTablero = alturaPared - alturaSuelo;

    if (tablero.length == 0) {
      crearTablero (anchuraTablero, alturaTablero);

      for (let i=alturaTablero; i>=alturaSuelo; i--) {
        console.log(tablero[i]);
      }
    }
  }
});

AFRAME.registerComponent('pared_izq', {
  schema: {
    position: {default: "0 0 0"},
    width: {default: 0},
    height: {default: 0}
  },

  init: function() {
    var el = this.el;
    var data = this.data;

    el.setAttribute('position', data.position);
    el.setAttribute('color', "black");
    el.setAttribute('width', data.width);
    el.setAttribute('height', data.height);
    el.id = 'pared_izq';
  },

  tick: function() {
    var el = this.el;
    var data = this.data;

    var pieza = document.getElementById("cubo");
    var position = pieza.getAttribute('position');
    var anchuraPieza = pieza.getAttribute('width');
    var positionPared = el.getAttribute('position');

    limiteIzq = (positionPared.x + data.width/2);

    if (position.x <= limiteIzq + anchuraPieza/2) {
      piezaTocaParedIzq = true;
    } else {
      piezaTocaParedIzq = false;
    }
  }
});

AFRAME.registerComponent('pared_der', {
  schema: {
    position: {default: "0 0 0"},
    width: {default: 0},
    height: {default: 0}
  },

  init: function() {
    var el = this.el;
    var data = this.data;

    el.setAttribute('position', data.position);
    el.setAttribute('color', "black");
    el.setAttribute('width', data.width);
    el.setAttribute('height', data.height);
    el.id = 'pared_der';

  },

  tick: function() {
    var el = this.el;
    var data = this.data;

    var pieza = document.getElementById("cubo");
    var position = pieza.getAttribute('position');
    var anchuraPieza = pieza.getAttribute('width');
    var positionPared = el.getAttribute('position');

    limiteDer = (positionPared.x - data.width/2);

    if (position.x >= limiteDer - anchuraPieza/2) {
      piezaTocaParedDer = true;
    } else {
      piezaTocaParedDer = false;
    }
  }
});
